---
# Add a fast check to speed reconfiguration
- set_fact: CLUES_PATH=/usr/local/bin/clues
  when: ansible_os_family == "Debian"

- set_fact: CLUES_PATH=/usr/bin/clues
  when: ansible_os_family == "RedHat"

- stat: path={{CLUES_PATH}}
  register: clues_installed

- name: "Remove /tmp/{{ container_name }}_is_running"
  file: 
    path: "/tmp/{{ container_name }}_is_running"
    state: absent

- name: "If container {{ container_name }} is running, it creates /tmp/{{ container_name }}_is_running"
  command: "docker inspect {{ container_name }} > /dev/null && echo 1>/tmp/{{ container_name }}_is_running  || echo '{{ container_name }} is not running'"
  ignore_errors: yes

- stat: path="/tmp/{{ container_name }}_is_running"
  register: container_is_running

- block:
  - name: Create EC3 directory
    file: path=/usr/local/ec3 state=directory mode=755

  - name: Create /etc/clues2 directory
    file: path=/etc/clues2 state=directory mode=755

  - name: Create auth file
    copy:
      dest: /usr/local/ec3/auth.dat
      content: "{{auth}}"
      force: no

  - name: Copy 'extract_proxy' file
    copy: dest=/tmp/extract_proxy.py src=extract_proxy.py mode=0755 force=no

  - name: Extract proxy information
    command: /tmp/extract_proxy.py creates=/usr/local/ec3/proxy.pem
    ignore_errors: yes
    run_once: true

  # Get CLUES2 and dependencies
  - name: Retrieve cpyutils and clues from github
    get_url: url=https://github.com/grycap/{{item}}/archive/master.zip dest=/tmp/{{item}}.zip force=no
    register: result
    until: result|success
    retries: 5
    delay: 1
    with_items:
    - cpyutils
    - clues  

  # Unarchive CLUES2 and dependencies
  - name: Unarchiving CLUES2 and cpyutils
    unarchive: src=/tmp/{{item}}.zip dest=/tmp copy=no creates=/tmp/{{item}}-master
    with_items:
    - clues
    - cpyutils  

  # Install CLUES and dependencies when not clues_use_docker 
  - block:  
    - name: Include "{{ansible_os_family}}" CLUES2 requirements
      include: "{{ansible_os_family}}.yml"

    - name: Install CLUES2 pip requirements
      pip: name={{item}} state=latest executable=pip
      with_items:
      - web.py
      - ply
      - radl

    # CLUES2 installation
    - name: Install cpyutils
      command: python setup.py install chdir=/tmp/cpyutils-master
    - name: Install CLUES2
      command: python setup.py install chdir=/tmp/clues-master creates={{CLUES_SERVER_BINARY}}

    - name: Stop clues server
      command: systemctl stop cluesd
      ignore_errors: yes

    when: not clues_use_docker

  # Copy configuration files (it is nedeed because for docker installation because the role doesn't execute setup.py ) when clues_use_docker 
  - name: "Copy /tmp/clues-master/etc/ to /etc/clues2"
    copy:
      src: /tmp/clues-master/etc/
      dest: /etc/clues2
      directory_mode: yes
      remote_src: no
    when: clues_use_docker

  # Configuring CLUES and IM
  - name: Set CLUES2 folder rights
    file: path=/etc/clues2 state=directory mode=755

  - name: Create CLUES2 config file
    copy: src=/etc/clues2/clues2.cfg-full-example dest=/etc/clues2/clues2.cfg force=no
    #notify: restart cluesd

  - name: Set CLUES2 config file values
    ini_file: dest=/etc/clues2/clues2.cfg section={{ item.section }} option={{ item.option }} value="{{ item.value }}"
    with_items:
      - { section: 'general', option: 'POWERMANAGER_CLASS', value: '{{clues_powermanager_class}}' }
      - { section: 'scheduling', option: 'IDLE_TIME', value: '1800' }
      - { section: 'scheduling', option: 'RECONSIDER_JOB_TIME', value: '120' }
      - { section: 'monitoring', option: 'MAX_WAIT_POWERON', value: '3000' }
      - { section: 'monitoring', option: 'MAX_WAIT_POWEROFF', value: '600' }
      - { section: 'monitoring', option: 'PERIOD_LIFECYCLE', value: '10' }
      - { section: 'monitoring', option: 'PERIOD_MONITORING_NODES', value: '2' }
      - { section: 'general', option: 'CLUES_SECRET_TOKEN', value: '{{clues_secret_token}}' }
      - { section: 'client', option: 'CLUES_SECRET_TOKEN', value: '{{clues_secret_token}}' }
      - { section: 'client', option: 'CLUES_REQUEST_WAIT_TIMEOUT', value: '3000' }
      - { section: 'IM_VIRTUAL_CLUSTER', option: 'IM_VIRTUAL_CLUSTER_XMLRPC', value: '{{ IM_VIRTUAL_CLUSTER_XMLRPC }}' }
    #notify: restart cluesd

  - name: Create IM plugin configuration file for CLUES2
    copy: src=/etc/clues2/conf.d/plugin-im.cfg-example dest=/etc/clues2/conf.d/plugin-im.cfg force=no
    #notify: restart cluesd

  - name: Set IM plugin configuration file values
    ini_file: dest=/etc/clues2/conf.d/plugin-im.cfg section="IM VIRTUAL CLUSTER" option={{ item.option }} value="{{ item.value }}"
    with_items:
      - { option: 'IM_VIRTUAL_CLUSTER_AUTH_DATA_FILE', value: '/usr/local/ec3/auth.dat' }
      - { option: 'IM_VIRTUAL_CLUSTER_XMLRPC', value: '{{ IM_VIRTUAL_CLUSTER_XMLRPC }}' }
      - { option: 'IM_VIRTUAL_CLUSTER_DROP_FAILING_VMS', value: '600' }
    #notify: restart cluesd

  # CLUES LRMS configuration
  - name: Configuring the elastic cluster to use "{{clues_queue_system}}" LRMS
    include: "{{clues_queue_system}}.yml"

  # DOCKER START
  - block:
    - name: Create {{ clues_configuration_dir }} directory
      file: path={{ clues_configuration_dir }} state=directory mode=755

    - name: "Copy /etc/clues2 to {{ clues_configuration_dir }}"
      copy:
        src: /etc/clues2/
        dest: "{{ clues_configuration_dir }}"
        directory_mode: yes
        remote_src: no

    - name: Install dependencies for docker management
      pip: name=docker-py
    
    - name: Run Clues container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ clues_image }}"
        state: started
        detach: True
        restart_policy: always
        network_mode: bridge
        volumes:
        - "{{ clues_configuration_dir }}:/etc/clues2"
        - "/usr/local/ec3:/usr/local/ec3"
        #published_ports:
        #- "0.0.0.0:8000:8000"
        hostname: "{{ container_name }}"
        command: "service cluesd start && tail -f /var/log/clues2/clues2.log"

    when: clues_use_docker

  # NORMAL START
  - block:  
    - name: "Start cluesd service"
      service: name=cluesd state=started enabled=yes

    # This fixes a problem with the CLUES service in Centos 7
    - name: Kill and restart clues service (Centos 7 only)
      shell: pgrep cluesserver | xargs kill && service cluesd start
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version|int >= 7
    when: not clues_use_docker
    
  when: (not clues_use_docker and not clues_installed.stat.exists) or (clues_use_docker and not container_is_running.stat.exists)